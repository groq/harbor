name: Publish Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  REGISTRY: ghcr.io

jobs:
  release:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Setup env
        run: |
          echo "CUR_TAG=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "BASE_TAG=$(cat ./VERSION)" >> $GITHUB_ENV
          echo "PRERELEASE=$(echo ${{ github.ref_name }} | grep -q 'rc\|alpha\|beta' && echo 'true' || echo 'false')" >> $GITHUB_ENV
          
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Harbor Images
        run: |
          sudo make build \
            GOBUILDTAGS="include_oss include_gcs" \
            BASEIMAGETAG=${{ env.BASE_TAG }} \
            VERSIONTAG=${{ env.CUR_TAG }} \
            TRIVYFLAG=true \
            EXPORTERFLAG=true \
            BUILD_BASE=false \
            PULL_BASE_FROM_DOCKERHUB=true \
            IMAGENAMESPACE=${{ env.REGISTRY }}/${{ github.repository }}

      - name: Push Harbor Images to GHCR
        run: |
          # Get list of built images
          images=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep "${{ env.REGISTRY }}/${{ github.repository }}" | grep "${{ env.CUR_TAG }}" | awk '{print $1}')
          
          # Push each image
          for image in $images; do
            echo "Pushing $image"
            docker push $image
          done

      - name: Create offline installer package
        run: |
          sudo make package_offline \
            GOBUILDTAGS="include_oss include_gcs" \
            BASEIMAGETAG=${{ env.BASE_TAG }} \
            VERSIONTAG=${{ env.CUR_TAG }} \
            PKGVERSIONTAG=${{ env.CUR_TAG }} \
            TRIVYFLAG=true \
            EXPORTERFLAG=true \
            BUILD_BASE=false \
            IMAGENAMESPACE=${{ env.REGISTRY }}/${{ github.repository }}

      - name: Create online installer package
        run: |
          sudo make package_online \
            GOBUILDTAGS="include_oss include_gcs" \
            BASEIMAGETAG=${{ env.BASE_TAG }} \
            VERSIONTAG=${{ env.CUR_TAG }} \
            PKGVERSIONTAG=${{ env.CUR_TAG }} \
            TRIVYFLAG=true \
            EXPORTERFLAG=true \
            BUILD_BASE=false \
            IMAGENAMESPACE=${{ env.REGISTRY }}/${{ github.repository }}

      - name: Generate checksums
        run: |
          offline_package=$(ls harbor-offline-installer-*.tgz)
          online_package=$(ls harbor-online-installer-*.tgz)
          
          echo "Generating checksums..."
          md5sum $offline_package > checksums.txt
          md5sum $online_package >> checksums.txt
          sha256sum $offline_package >> checksums.txt
          sha256sum $online_package >> checksums.txt
          
          echo "OFFLINE_PACKAGE=$offline_package" >> $GITHUB_ENV
          echo "ONLINE_PACKAGE=$online_package" >> $GITHUB_ENV

      - name: Generate release notes
        run: |
          release_notes_path=$(pwd)/release-notes.txt
          
          # Generate release notes using GitHub API
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/releases/generate-notes \
            -d '{"tag_name":"${{ env.CUR_TAG }}"}' \
            | jq -r '.body' > $release_notes_path
          
          echo "RELEASE_NOTES_PATH=$release_notes_path" >> $GITHUB_ENV

      - name: RC Release
        uses: softprops/action-gh-release@v2
        if: ${{ env.PRERELEASE == 'true' }}
        with:
          body_path: ${{ env.RELEASE_NOTES_PATH }}
          prerelease: true
          files: |
            ${{ env.OFFLINE_PACKAGE }}
            checksums.txt
            
      - name: GA Release
        uses: softprops/action-gh-release@v2
        if: ${{ env.PRERELEASE == 'false' }}
        with:
          body_path: ${{ env.RELEASE_NOTES_PATH }}
          files: |
            ${{ env.OFFLINE_PACKAGE }}
            ${{ env.ONLINE_PACKAGE }}
            checksums.txt
