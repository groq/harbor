name: "Build Package Workflow"
env:
  DOCKER_COMPOSE_VERSION: 1.23.0
  REGISTRY: ghcr.io

on:
  push:
    branches:
      - groq_release
      - release-*

jobs:
  BUILD_PACKAGE:
    env:
        BUILD_PACKAGE: true
    runs-on:
      - ubuntu-22.04
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Set up Go 1.22
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.2
        id: go
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - uses: actions/checkout@v4
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set version variables
        run: |
          target_branch="$(echo ${GITHUB_REF#refs/heads/})"
          target_release_version=$(cat ./VERSION)
          Harbor_Package_Version=$target_release_version-'build.'$GITHUB_RUN_NUMBER

          if [[ $target_branch == "groq_release" ]]; then
            Harbor_Assets_Version=$Harbor_Package_Version
          else
            Harbor_Assets_Version=$target_release_version
          fi

          if [[ $target_branch == "release-"* ]]; then
            Harbor_Build_Base_Tag=$target_release_version
          else
            Harbor_Build_Base_Tag=dev
          fi
          
          echo "HARBOR_ASSETS_VERSION=$Harbor_Assets_Version" >> $GITHUB_ENV
          echo "HARBOR_PACKAGE_VERSION=$Harbor_Package_Version" >> $GITHUB_ENV
          echo "HARBOR_BUILD_BASE_TAG=$Harbor_Build_Base_Tag" >> $GITHUB_ENV
          echo "TARGET_BRANCH=$target_branch" >> $GITHUB_ENV
          echo "REGISTRY_PREFIX=${{ env.REGISTRY }}/${{ github.repository }}/" >> $GITHUB_ENV

      - name: Prepare Build Environment
        run: |
          sudo make versions_prepare check_environment

      - name: Build Harbor Images
        run: |
          sudo make build \
            GOBUILDTAGS="include_oss include_gcs" \
            BASEIMAGETAG=${{ env.HARBOR_BUILD_BASE_TAG }} \
            VERSIONTAG=${{ env.HARBOR_ASSETS_VERSION }} \
            TRIVYFLAG=true \
            EXPORTERFLAG=true \
            BUILD_BASE=false \
            PULL_BASE_FROM_DOCKERHUB=true \
            IMAGENAMESPACE=${{ env.REGISTRY }}/${{ github.repository }}

      - name: Push Harbor Images to GHCR
        run: |
          # Get list of built images
          images=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep "${{ env.REGISTRY }}/${{ github.repository }}" | grep "${{ env.HARBOR_ASSETS_VERSION }}" | awk '{print $1}')
          
          # Push each image
          for image in $images; do
            echo "Pushing $image"
            docker push $image
          done

      - name: Create offline installer package
        run: |
          sudo make package_offline \
            GOBUILDTAGS="include_oss include_gcs" \
            BASEIMAGETAG=${{ env.HARBOR_BUILD_BASE_TAG }} \
            VERSIONTAG=${{ env.HARBOR_ASSETS_VERSION }} \
            PKGVERSIONTAG=${{ env.HARBOR_PACKAGE_VERSION }} \
            TRIVYFLAG=true \
            EXPORTERFLAG=true \
            BUILD_BASE=false \
            IMAGENAMESPACE=${{ env.REGISTRY }}/${{ github.repository }}

      - name: Create online installer package
        run: |
          sudo make package_online \
            GOBUILDTAGS="include_oss include_gcs" \
            BASEIMAGETAG=${{ env.HARBOR_BUILD_BASE_TAG }} \
            VERSIONTAG=${{ env.HARBOR_ASSETS_VERSION }} \
            PKGVERSIONTAG=${{ env.HARBOR_PACKAGE_VERSION }} \
            TRIVYFLAG=true \
            EXPORTERFLAG=true \
            BUILD_BASE=false \
            IMAGENAMESPACE=${{ env.REGISTRY }}/${{ github.repository }}

      - name: Upload packages as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: harbor-packages-${{ env.HARBOR_PACKAGE_VERSION }}
          path: |
            harbor-offline-installer-*.tgz
            harbor-online-installer-*.tgz
